# script to run survival analysis using TCGA data

library(TCGAbiolinks)
library(survminer)
library(survival)
library(SummarizedExperiment)
library(tidyverse)
library(DESeq2)

# getting clinical data for TCGA-GBM
clinical_gbm <- GDCquery_clinic("TCGA-GBM")
# to check the presence of columns
any(colnames(clinical_gbm) %in% c("vital_status", "days_to_last_follow_up", "days_to_death"))
# to get the column number
which(colnames(clinical_gbm) %in% c("vital_status", "days_to_last_follow_up", "days_to_death"))
# to look at the columns
clinical_gbm[,c(10,107,112)]

# looking at some variables associated with survival
table(clinical_gbm$vital_status)

# sensoring patients by the vital status event
clinical_gbm$deceased <- ifelse(clinical_gbm$vital_status == "Alive", FALSE, TRUE)

# create an "overall survival" variable that is equal to days_to_death
# for dead patients, and to days_to_last_follow_up for patients who
# are still alive
clinical_gbm$overall_survival <- ifelse(clinical_gbm$vital_status == "Alive",
                                         clinical_gbm$days_to_last_follow_up,
                                         clinical_gbm$days_to_death)
# get gene expression data
# build a query to get gene expression data for entire cohort
query_gbm_all = GDCquery(
  project = "TCGA-GBM",
  data.category = "Transcriptome Profiling", # parameter enforced by GDCquery
  experimental.strategy = "RNA-Seq",
  workflow.type = "STAR - Counts",
  data.type = "Gene Expression Quantification",
  access = "open")

output_gbm <- getResults(query_gbm_all)

GDCdownload(query_gbm_all)

# get counts
tcga_gbm_data <- GDCprepare(query_gbm_all, summarizedExperiment = TRUE)
gbm_matrix <- assay(tcga_gbm_data, "unstranded")
# just to check the rows and columns
gbm_matrix[1:20,1:20]

# extract gene and sample metadata from summarizedExperiment object
gene_metadata <- as.data.frame(rowData(tcga_gbm_data))
coldata <- as.data.frame(colData(tcga_gbm_data))

# vst (variant stabilizing transformation) transform counts to be used in survival analysis ---------------
# Setting up countData object   
dds <- DESeqDataSetFromMatrix(countData = gbm_matrix,
                              colData = coldata,
                              design = ~ 1)

# Removing low expressing genes i.e. with sum total of 10 reads across all samples
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]

# vst 
vsd <- vst(dds, blind=FALSE)
gbm_matrix_vst <- assay(vsd)
gbm_matrix_vst[1:10,1:10]


# add gene symbols to the vst data
 
gbm_usp6 <- gbm_matrix_vst %>%
  as.data.frame() %>%
  rownames_to_column(var = 'gene_id') %>%
  gather(key = 'case_id', value = 'counts', -gene_id) %>% 
  left_join(., gene_metadata, by = "gene_id") %>%
  filter(gene_name == "USP6")

# get median value   
median_value <- median(gbm_usp6$counts)

# denote which cases have higher or lower expression than median count
gbm_usp6$strata <- ifelse(gbm_usp6$counts >= median_value, "HIGH", "LOW")

# Add clinical information to gbm_usp6
gbm_usp6$case_id <- gsub('-01C.*', '', gbm_usp6$case_id)
# combining dataframes
gbm_usp6 <- merge(gbm_usp6, clinical_gbm, by.x = 'case_id', by.y = 'submitter_id')

# fitting survival curve -----------
fit <- survfit(Surv(overall_survival, deceased) ~ strata, data = gbm_usp6)
fit
ggsurvplot(fit,
           data = gbm_usp6,
           pval = T,
           risk.table = T)


fit2 <- survdiff(Surv(overall_survival, deceased) ~ strata, data = gbm_usp6)

# Save the DataFrame as a CSV file with the correct syntax and file path
write.csv(gbm_usp6, file = "P:/R/gbm_usp6.csv", row.names = TRUE)

